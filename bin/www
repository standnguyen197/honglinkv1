#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mean-app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);
var http = require('http').Server(app);
var io = require('socket.io')(http);

http.listen(port, function() {
    console.log('Server connected! Port 8080');
});
/**
 * Listen on provided port, on all network interfaces.
 */
// ============= AI STAND ===================== //
const cheerio = require('cheerio')
var htmlspecialchars = require('htmlspecialchars');
var request = require('request');
var randomstring = require("randomstring");
var Code = require('../models/Code');
var shortid = require('shortid');
var mongoose = require('mongoose');

io.on('connection', function(socket) {
    console.log('A user connected');
    socket.on('sendMessage', function(mes) {
        var Str = htmlspecialchars(mes.content);
        var OneFunc = Str.split(' ')[0];
        var ValueFunc = Str.split(' ')[1];
        console.log(`${OneFunc} ----- ${ValueFunc}`)
         if (OneFunc == 'hd') {
          mes = {
              content: `<p>S·ª≠ d·ª•ng <code style="background: #000;">en</code> ƒë·ªÉ m√£ h√≥a r√∫t ng·ªçn link!<br/> C√∫ ph√°p <code style="background: #000;">en_link</code>. V√≠ d·ª• mu·ªën <en>(m√£ h√≥a) link Facebook c√°c b·∫°n vi·∫øt nh∆∞ sau:
              <code style="background: #000;">en https://facebook.com</code> (nh·ªõ vi·∫øt c·∫£ http:// ho·∫∑c https:// n·∫øu web ƒë√≥ c√≥ nh√©.
              <p>S·ª≠ d·ª•ng <code style="background: #000;">de</code> ƒë·ªÉ gi·∫£i m√£ link! <br/> C√∫ ph√°p <code style="background: #000;">de_m√£ code</code>. V√≠ d·ª• mu·ªën <de> link c√≥ m√£ 12HD c√°c b·∫°n vi·∫øt nh∆∞ sau:
              <code style="background: #000;">de 12HD</code> n·∫øu c√≥ trong d·ªØ li·ªáu Tokuda s·∫Ω tr·∫£ v·ªÅ link ƒë·ªÉ ƒëi ƒë·∫øn!
              </p>
              <p> R√∫t g·ªçn ƒë·ªÉ tr√°nh FB Ch·∫∑n link.. V√¨ 1 c·ªông ƒë·ªìng <span class="font-voll"> ADAM CH√ÇN CH√çNH <span> <p>`
          };
          socket.emit('replyMessage', {
              mes
          });
      }else if (OneFunc == 'en') {
            // M√£ h√≥a r√∫t g·ªçn ƒë∆∞a ra ngo√†i!
            var url = ValueFunc;
            request(url, function (error, response, body) 
              {
                if (!error && response.statusCode == 200) 
                {
                  var $ = cheerio.load(body);
                  var title = $("title").text();
                  var rand = randomstring.generate({
                    length: 4,
                    charset: 'hex',
                    capitalization: 'uppercase'
                  });
                  mes = {
                    content: `Code: üíñ<code style="background: #000;font-size: 30px;">${rand}</code>üíñ - ${title}`
                  };
                socket.emit('replyMessage', {
                    mes
                });

                  var idShort = shortid.generate();
                  var dataCode = {
                    _id: idShort, // C≈©ng l√† url r√∫t g·ªçn lu√¥n
                    title: title,
                    link: ValueFunc,
                    code: rand
                  };
                  // L∆∞u DB

                  Code.create(dataCode, function (err, post) {
                    if (err){
                      return next(err);
                    }
                  });
                
                }else{
                  mes = {
                    content: `enCode link kh√¥ng th√†nh c√¥ng! Xin th·ª≠ link kh√°c!`
                  };
                    socket.emit('replyMessage', {
                        mes
                    });
                }
              });
              // END REQUEST ENCODE;

          
        } else if (OneFunc == 'de') {
          var ValueFuncUpCase = ValueFunc.toUpperCase();

          //T√¨m trong c∆° s·ªü d·ªØ li·ªáu
          // Code.findOne({code: ValueFuncUpCase})
          //   .select({_id: 1, title: 1})
          //   .lean()
          //   .exec((error, data) => {
          //     console.log(data._id)
          //   })
          Code.findOne({ code: ValueFuncUpCase }).select({_id: 1, title: 1})
          .lean()
          .exec((error, xCode) => {
            if (error) {
              return handleError(err);
            }
            var xCodeLink = xCode._id;
            var xCodeTitle = xCode.title;
            if(xCode == ''){
              mes = {
                content: `Xin l·ªói Tokuda t√¥i kh√¥ng t√¨m th·∫•y code '${ValueFuncUpCase}' n√†y!`
              };
              socket.emit('replyMessage', {
                mes
            });
            }else{
              mes = {
                content: `<p>Tokuda ƒë√¢y xin g·ª≠i l·∫°i link:</p>
                <a href="http://giaolink.site/#/go/${xCodeLink}" target=_blank>http://giaolink.site/#/go/${xCodeLink}</a>
                <p>üíñ${xCodeTitle}üíñ</p> - H√£y ·ªßng h·ªô Tokuda t√¥i nh√©!`,
                codeHTML: true
              };
              socket.emit('replyMessage', {
                mes
            });
            }


          });
           

        }else{
          mes = {
            content: `Kh√¥ng c√≥ ${OneFunc} ƒë√¢u nh√©!`
        };
        socket.emit('replyMessage', {
            mes
        });
        }

    });
});

http.on('error', onError);
http.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = http.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}